import { type NextRequest, NextResponse } from "next/server"
import { createToken } from "@/lib/auth"

export async function POST(request: NextRequest) {
  try {
    const { name, email, password } = await request.json()

    // TODO: Replace with actual user registration logic
    // This should validate input, hash password, and save to database
    if (!name || !email || !password) {
      return NextResponse.json({ message: "Name, email, and password are required" }, { status: 400 })
    }

    if (password.length < 8) {
      return NextResponse.json({ message: "Password must be at least 8 characters long" }, { status: 400 })
    }

    // Mock registration - replace with real user creation
    // Check if user already exists
    if (email === "existing@company.com") {
      return NextResponse.json({ message: "User with this email already exists" }, { status: 409 })
    }

    // Create new user (mock)
    const user = {
      userId: Date.now().toString(), // In real app, this would be generated by your database
      email,
      name,
    }

    const token = await createToken(user)

    const response = NextResponse.json(
      {
        message: "Registration successful",
        user: {
          id: user.userId,
          email: user.email,
          name: user.name,
        },
      },
      { status: 201 },
    )

    // Set the JWT token as an HTTP-only cookie
    response.cookies.set("auth-token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      maxAge: 60 * 60 * 24, // 24 hours
      path: "/",
    })

    return response
  } catch (error) {
    console.error("Registration error:", error)
    return NextResponse.json({ message: "Internal server error" }, { status: 500 })
  }
}
